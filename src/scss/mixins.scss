// import map
@use "sass:map";

// general reset
@mixin reset($pad: null, $mar: null, $box: null, $deco: null, $listo: null) {
	padding: $pad;
	margin: $mar;
	box-sizing: $box;
	text-decoration: $deco;
	list-style-type: $listo;
}

// list reset
@mixin reset-list {
	margin: 0;
	padding: 0;
	list-style: none;
}

// font sizes
@mixin fontSize {
	font-size: map-get($fontSize, 'xs');
	@include bp(sm) {
		font-size: map-get($fontSize, 'sm');
	}
	@include bp(md) {
		font-size: map-get($fontSize, 'md');
	}
	@include bp(lg) {
		font-size: map-get($fontSize, 'lg');
	}
	@include bp(xl) {
		font-size: map-get($fontSize, 'xl');
	}
}

// h1 sizes
@mixin h1Size {
	font-size: map-get($h1Size, 'xs');
	@include bp(sm) {
		font-size: map-get($h1Size, 'sm');
	}
	@include bp(md) {
		font-size: map-get($h1Size, 'md');
	}
	@include bp(lg) {
		font-size: map-get($h1Size, 'lg');
	}
	@include bp(xl) {
		font-size: map-get($h1Size, 'xl');
	}
}

// h2 sizes
@mixin h2Size {
	font-size: map-get($h2Size, 'xs');
	@include bp(sm) {
		font-size: map-get($h2Size, 'sm');
	}
	@include bp(md) {
		font-size: map-get($h2Size, 'md');
	}
	@include bp(lg) {
		font-size: map-get($h2Size, 'lg');
	}
	@include bp(xl) {
		font-size: map-get($h2Size, 'xl');
	}
}

// icon heights
@mixin iconHeight {
	height: map-get($iconHeight, 'xs');
	@include bp(sm) {
		height: map-get($iconHeight, 'sm');
	}
	@include bp(md) {
		height: map-get($iconHeight, 'md');
	}
	@include bp(lg) {
		height: map-get($iconHeight, 'lg');
	}
	@include bp(xl) {
		height: map-get($iconHeight, 'xl');
	}
}

// lists
$channel1: #19bc9c;
$channel2: #f1c40e;
$channel3: #9b59b6;
$channel4: #3398db;

@mixin box-shadow($values...) {
	-webkit-box-shadow: $values;
	-moz-box-shadow: $values;
	box-shadow: $values;
}

li {
	$colours: $channel1, $channel2, $channel3, $channel4;

	@for $i from 1 through length($colours) {
		&.channel#{$i} {
			@include box-shadow(inset -3px 0 0 0 nth($colours, $i));
		}
	}
}

// media breakpoints
@mixin bp($point) {
	$bp-xxs: 'screen and (max-width: 310px)';
	$bp-xs: 'screen and (max-width: 479px)';
	$bp-sm: 'screen and (min-width: 480px) and (max-width: 575px)';
	$bp-md: 'screen and (min-width: 576px) and (max-width: 767px)';
	$bp-lg: 'screen and (min-width: 768px) and (max-width: 1399px)';
	$bp-xl: 'screen and (min-width: 1400px)';

	@if $point == xxs {
		@media #{$bp-xxs} {
			@content;
		}
	} @else if $point == xs {
		@media #{$bp-xs} {
			@content;
		}
	} @else if $point == sm {
		@media #{$bp-sm} {
			@content;
		}
	} @else if $point == md {
		@media #{$bp-md} {
			@content;
		}
	} @else if $point == lg {
		@media #{$bp-lg} {
			@content;
		}
	} @else if $point == xl {
		@media #{$bp-xl} {
			@content;
		}
	}
}

// @mixin bpWrap($point) {
// 	$bp-sm: 'screen and (max-width: 480px)';
// 	$bp-md: 'screen and (min-width: 481px) and (max-width: 1099px)';
// 	$bp-lg: 'screen and (min-width: 1100px) and (max-width: 1399px)';
// 	$bp-xl: 'screen and (min-width: 1400px)';

// 	@if $point == sm {
// 		@media #{$bp-sm} {
// 			@content;
// 		}
// 	} @else if $point == md {
// 		@media #{$bp-md} {
// 			@content;
// 		}
// 	} @else if $point == lg {
// 		@media #{$bp-lg} {
// 			@content;
// 		}
// 	} @else if $point == xl {
// 		@media #{$bp-xl} {
// 			@content;
// 		}
// 	}
// }
